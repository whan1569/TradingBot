### **📌 성능 메트릭 사전 (PC 최적화 적용 - AMD64 & RTX 3060 기준, 1분 단위 트레이딩 반영)**  

**Cursor가 쉽게 이해하고 분석할 수 있도록 성능 메트릭을 정리**했습니다.  
트레이딩 봇의 성능을 모니터링하고 최적화하는 데 필요한 주요 지표를 포함합니다.  

---

## **1️⃣ 트레이딩 성능 메트릭**  
트레이딩 시스템의 실행 성능을 측정하는 지표입니다.  
### ✅ **주요 성능 지표**  
| 메트릭명            | 단위       | 설명 |  
|---------------------|------------|----------------------------------------------|  
| `latency`          | ms         | 주문 요청부터 응답까지 걸리는 시간 |  
| `fill_rate`        | %          | 주문 체결 비율 (체결 수량 / 요청 수량) |  
| `slippage`         | %          | 주문 요청 가격과 실제 체결 가격 차이 |  
| `order_success`    | %          | 성공적으로 실행된 주문 비율 |  
| `trade_frequency`  | trades/min | 1분당 평균 트레이드 횟수 |  
| `execution_speed`  | ms         | 주문이 실행되는 평균 속도 |  

**📌 예제 데이터**  
```json
{
  "latency": 85.6,
  "fill_rate": 98.2,
  "slippage": 0.03,
  "order_success": 99.5,
  "trade_frequency": 5.2,
  "execution_speed": 120.4
}
```

---

## **2️⃣ 시스템 성능 메트릭**  
CPU, RAM, GPU, 네트워크 사용량을 포함한 시스템 리소스 메트릭입니다.  
### ✅ **CPU & 메모리 사용량**  
| 메트릭명       | 단위     | 설명 |  
|---------------|---------|----------------------------------------------|  
| `cpu_usage`   | %       | CPU 사용률 (멀티코어 평균) |  
| `ram_usage`   | GB      | 사용 중인 RAM 용량 |  
| `swap_usage`  | GB      | 사용 중인 스왑 메모리 |  
| `gpu_usage`   | %       | RTX 3060 GPU 사용률 |  
| `gpu_memory`  | GB      | GPU 메모리 사용량 |  

**📌 예제 데이터**  
```json
{
  "cpu_usage": 35.2,
  "ram_usage": 8.4,
  "swap_usage": 0.5,
  "gpu_usage": 12.8,
  "gpu_memory": 2.3
}
```

---

## **3️⃣ 네트워크 성능 메트릭**  
WebSocket 및 API 요청의 네트워크 응답 속도를 측정합니다.  
### ✅ **네트워크 지표**  
| 메트릭명        | 단위    | 설명 |  
|---------------|--------|----------------------------------------------|  
| `ping`       | ms     | Binance 서버까지의 왕복 시간 |  
| `ws_latency` | ms     | WebSocket 응답 지연 시간 |  
| `api_latency`| ms     | REST API 요청 응답 시간 |  
| `packet_loss`| %      | 패킷 손실률 |  
| `bandwidth`  | Mbps   | 네트워크 대역폭 사용량 |  

**📌 예제 데이터**  
```json
{
  "ping": 86,
  "ws_latency": 15.2,
  "api_latency": 120.8,
  "packet_loss": 0.1,
  "bandwidth": 2.5
}
```

---

## **4️⃣ 데이터 처리 성능 메트릭**  
트레이딩 데이터 처리 속도를 측정합니다.  
### ✅ **데이터 처리 성능 지표**  
| 메트릭명         | 단위   | 설명 |  
|-----------------|------|----------------------------------------------|  
| `data_fetch`   | ms   | 1분 단위 데이터 수집 속도 |  
| `data_parse`   | ms   | API 응답 데이터 파싱 속도 |  
| `db_write`     | ms   | 데이터 저장 속도 (Parquet 적용) |  
| `cache_hit`    | %    | 캐시 히트율 (Redis 적용) |  

**📌 예제 데이터**  
```json
{
  "data_fetch": 45.8,
  "data_parse": 5.2,
  "db_write": 23.4,
  "cache_hit": 89.5
}
```

---

## **5️⃣ 트레이딩 전략 성능 메트릭**  
트레이딩 전략이 얼마나 효과적으로 작동하는지 평가하는 지표입니다.  
### ✅ **전략 성능 지표**  
| 메트릭명            | 단위   | 설명 |  
|---------------------|------|----------------------------------------------|  
| `win_rate`         | %    | 수익 거래 비율 |  
| `sharpe_ratio`     | -    | 위험 대비 수익률 (높을수록 좋음) |  
| `max_drawdown`     | %    | 최대 손실폭 |  
| `profit_factor`    | -    | 총 수익 / 총 손실 (1 이상이면 수익성 있음) |  

**📌 예제 데이터**  
```json
{
  "win_rate": 67.5,
  "sharpe_ratio": 1.8,
  "max_drawdown": -12.3,
  "profit_factor": 2.5
}
```

---

### **📌 결론**  
- **Cursor가 쉽게 이해할 수 있도록 각 메트릭별 설명 및 예시 포함**  
- **트레이딩 성능 / 시스템 성능 / 네트워크 성능 / 데이터 처리 / 전략 성능 메트릭을 정리**  
- **실시간 성능 모니터링 및 최적화 가능하도록 설계**  

🚀 **이제 성능 데이터를 실시간으로 수집하고 대시보드에서 모니터링하면 됨!** 🔥