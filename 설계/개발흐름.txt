
# **📌 테스트 시나리오 목록 (Session 1: API 연동 & 매매 로직 테스트)**  

## **🚀 1️⃣ API 연동 및 데이터 수집 테스트**  
### **✅ [TC-101] Binance API 연결 테스트**  
✔ **테스트 목표:**  
- Binance API 키 인증 및 연결 확인  

✔ **검증 방법:**  
1. `api_connector.py` 실행  
2. Binance API에서 서버 시간 조회 (`/api/v3/time`)  
3. 응답이 정상적으로 오는지 확인  

✔ **예상 결과:**  
- API 연결 성공 시 현재 서버 시간이 반환됨  
- API 키 오류 시 `401 Unauthorized` 반환됨  

---

### **✅ [TC-102] 실시간 가격 데이터 수집 테스트 (REST & WebSocket 비교)**  
✔ **테스트 목표:**  
- REST API와 WebSocket을 통해 같은 가격 데이터를 가져오는지 확인  

✔ **검증 방법:**  
1. `market_data.py` 실행하여 `BTC/USDT` 가격 수집  
2. REST API(`/api/v3/ticker/price`)와 WebSocket(`btcusdt@trade`) 비교  
3. 두 값이 일정 오차 범위 내에 있는지 검증  

✔ **예상 결과:**  
- 두 방식이 동일한 가격을 반환해야 함 (0.1% 이내 오차 허용)  
- WebSocket이 더 빠른 응답 속도를 보여야 함  

---

### **✅ [TC-103] WebSocket 연결 유지 및 자동 복구 테스트**  
✔ **테스트 목표:**  
- WebSocket이 끊어질 경우 자동으로 재연결되는지 확인  

✔ **검증 방법:**  
1. `websocket_client.py` 실행 후 연결 확인  
2. 네트워크를 끊거나, 강제로 종료 (`ws.close()`)  
3. 시스템이 자동으로 재연결 시도하는지 확인  

✔ **예상 결과:**  
- WebSocket이 자동으로 재연결되어 데이터 수집을 지속해야 함  

---

### **✅ [TC-104] API Rate Limit 초과 대응 테스트**  
✔ **테스트 목표:**  
- Binance API 요청 한도를 초과했을 때 정상적으로 대기 후 요청하는지 확인  

✔ **검증 방법:**  
1. `api_connector.py`에서 `get_balance()`를 100번 연속 실행  
2. `429 Too Many Requests` 발생 시 대기 시간이 적용되는지 확인  

✔ **예상 결과:**  
- 429 오류 발생 시 일정 시간 대기 후 자동 재시도해야 함  

---

## **🚀 2️⃣ 기본 매매 로직 테스트**  
### **✅ [TC-201] 주문 실행 테스트 (시장가 주문)**  
✔ **테스트 목표:**  
- 시장가 주문이 정상적으로 실행되는지 확인  

✔ **검증 방법:**  
1. `order_execution.py` 실행  
2. `BTC/USDT` 시장가 매수 주문 실행 (`create_market_order()`)  
3. Binance 거래 내역에서 주문이 정상적으로 체결되었는지 확인  

✔ **예상 결과:**  
- 주문이 즉시 체결되고, 잔고가 변해야 함  

---

### **✅ [TC-202] 주문 취소 테스트**  
✔ **테스트 목표:**  
- 지정가 주문을 정상적으로 취소할 수 있는지 확인  

✔ **검증 방법:**  
1. `BTC/USDT` 지정가 매수 주문 실행 (`create_limit_order()`)  
2. `cancel_order()` 실행하여 주문 취소  
3. Binance 주문 내역에서 취소 여부 확인  

✔ **예상 결과:**  
- 주문이 정상적으로 취소되어야 함  


---

# **📌 테스트 시나리오 목록 (Session 2: 백테스트, 강화학습, 실거래 최적화 & 모니터링)**  

## **🚀 3️⃣ 백테스트 시스템 검증**  
### **✅ [TC-301] 과거 데이터 기반 전략 검증**  
✔ **테스트 목표:**  
- 과거 데이터를 활용한 전략의 성과 검증  

✔ **검증 방법:**  
1. `backtest.py` 실행  
2. `2023-01-01 ~ 2023-12-31` 기간의 `BTC/USDT` 백테스트 실행  
3. 수익률 및 MDD(Maximum Drawdown) 확인  

✔ **예상 결과:**  
- 전략이 최소 **10% 이상의 수익률**을 기록해야 함  
- 손실이 발생할 경우 전략 개선 필요  

---

### **✅ [TC-302] 백테스트 데이터 처리 성능 테스트**  
✔ **테스트 목표:**  
- `Dask + Parquet` 적용 후 백테스트 속도 측정  

✔ **검증 방법:**  
1. `data_loader.py`에서 CSV vs Parquet 로딩 속도 비교  
2. `Dask` 적용 후 실행 시간 비교  

✔ **예상 결과:**  
- **Parquet + Dask가 CSV보다 최소 5배 이상 빠르게 실행**되어야 함  

---

## **🚀 4️⃣ 강화학습 및 적응형 전략 테스트**  
### **✅ [TC-401] ML 기반 전략 최적화 검증**  
✔ **테스트 목표:**  
- 머신러닝 모델이 자동으로 최적 전략을 선택하는지 확인  

✔ **검증 방법:**  
1. `adaptive_model_selector.py` 실행  
2. 과거 데이터 학습 후 실시간 데이터에 적용  
3. 매매 신호 정확도 검증  

✔ **예상 결과:**  
- 모델이 최소 **70% 이상의 매매 신호 정확도**를 기록해야 함  

---

## **🚀 5️⃣ 실거래 최적화 테스트**  
### **✅ [TC-501] 주문 체결 속도 측정**  
✔ **테스트 목표:**  
- 주문 체결 속도를 분석하고 최적화 가능 여부 확인  

✔ **검증 방법:**  
1. `order_execution.py`에서 시장가 주문 실행  
2. Binance에서 주문 체결 시간 확인  

✔ **예상 결과:**  
- 주문 체결이 **0.5초 이내**에 완료되어야 함  

---

### **✅ [TC-502] 네트워크 상태 영향 분석 (Ping & API 지연 테스트)**  
✔ **테스트 목표:**  
- 네트워크 환경이 트레이딩 성능에 미치는 영향을 측정  

✔ **검증 방법:**  
1. `ping binance.com` 실행하여 API 서버 응답 속도 확인  
2. 주문 실행 시 API 응답 시간 로깅  

✔ **예상 결과:**  
- 평균 Ping 값이 **100ms 이하**여야 안정적인 거래 가능  
- 주문 실행 API 응답 시간이 **200ms 이하**여야 함  

---

## **🚀 6️⃣ 대시보드 및 모니터링 테스트**  
### **✅ [TC-601] 실시간 데이터 업데이트 검증**  
✔ **테스트 목표:**  
- 대시보드에서 실시간 데이터가 정상적으로 표시되는지 확인  

✔ **검증 방법:**  
1. `dashboard_main.py` 실행  
2. WebSocket을 통해 `BTC/USDT` 가격 변동 감지  
3. 가격 업데이트 속도 확인  

✔ **예상 결과:**  
- 가격 업데이트가 **1초 이내**에 반영되어야 함  

---
