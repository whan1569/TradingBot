### 파일 구성도 (coin-trading-bot 프로젝트)

1. Root 디렉토리 구조
/coin-trading-bot
│
├── config/
│   ├── config.json              # 시스템 설정 파일
│   ├── strategy_config.json     # 전략 관련 설정
│   ├── api_keys.json            # API 키 파일 (Binance, LunarCrush 등)
│
├── data/
│   ├── raw/                     # 원시 데이터
│   ├── processed/               # 처리된 데이터 (심리 지표, 차트 분석)
│   ├── historical/              # 역사적 데이터
│
├── strategies/
│   ├── market_sentiment.py      # 시장 심리 분석
│   ├── chart_analysis.py        # 차트 분석 (이동평균선, RSI, 볼린저 밴드 등)
│   ├── signal_processing.py     # 롱/숏 신호 생성 로직
│   ├── trading_decision.py      # 최종 트레이딩 결정
│
├── models/
│   ├── sentiment_model.py       # 감성 분석 모델 (트위터, 뉴스)
│   ├── on_chain_model.py        # 온체인 데이터 분석 모델
│   ├── backtest_model.py        # 백테스트 및 최적화
│
├── backtest/
│   ├── backtest_engine.py       # 백테스트 실행 엔진
│   ├── test_results/            # 백테스트 결과 저장
│   ├── optimization.py          # 최적화 분석
│
├── system/
│   ├── auto_trader.py           # 자동 매매 시스템 본체
│   ├── notifier.py              # 알림 시스템 (거래 알림, 경고 등)
│
├── utils/
│   ├── data_loader.py           # 데이터 로딩 함수
│   ├── api_connector.py         # API 연결 함수 (Binance, LunarCrush 등)
│   ├── logger.py                # 로깅 관련 함수
│   ├── helpers.py               # 기타 유틸리티 함수
│
└── main.py                      # 시스템 실행 엔트리 포인트

2. 주요 디렉토리 및 파일 설명
- config/: API 키 및 전략 설정을 관리하는 디렉토리
- data/: 원시 및 처리된 데이터를 저장하는 디렉토리
- strategies/: 시장 분석 및 거래 전략 관련 모듈
  - market_sentiment.py: 시장 심리 분석 (공포 & 탐욕 지수, 롱/숏 비율, 소셜 데이터 분석)
  - chart_analysis.py: 차트 분석 (이동평균선, RSI, 볼린저 밴드 등)
  - signal_processing.py: 롱/숏 신호 판단
  - trading_decision.py: 최종 거래 결정
- models/: AI 및 데이터 분석 모델 저장
- backtest/: 백테스트 및 최적화 기능 구현
- system/: 자동 매매 및 알림 시스템
- utils/: API 연결, 데이터 로딩, 로깅 등의 유틸리티 함수 모음
- main.py: 시스템 실행 엔트리 포인트

3. 프로세스 흐름
1) 시장 데이터 수집
   - api_connector.py → 바이낸스 및 LunarCrush API에서 데이터 수집
   - data_loader.py → 수집된 데이터 정리 및 저장

2) 시장 심리 분석
   - market_sentiment.py → 공포 & 탐욕 지수, 롱/숏 비율, 소셜 미디어 분석

3) 차트 분석
   - chart_analysis.py → 이동평균선, RSI, 볼린저 밴드 분석

4) 롱/숏 신호 판단
   - signal_processing.py → 시장 심리와 차트 분석 통합 후 롱/숏 신호 생성

5) 최종 트레이딩 결정
   - trading_decision.py → 신호 기반 최종 매매 판단

6) 자동 매매 시스템 연동
   - auto_trader.py → 바이낸스 API를 통해 자동 거래 실행

7) 백테스트 및 최적화
   - backtest_engine.py → 역사적 데이터로 전략 검증
   - optimization.py → 최적화된 전략 도출

8) AI 기반 고도화
   - sentiment_model.py → 감성 분석 및 뉴스/트위터 분석
   - on_chain_model.py → 온체인 데이터 활용한 정밀 매매 신호 분석

9) 알림 시스템
   - notifier.py → 거래 내역 및 경고 알림 발송

4. 추가 고도화
- AI 심리 분석: sentiment_model.py에서 감성 분석 강화
- 선물 시장 반영: futures_analysis.py에서 레버리지 및 미결제약정 분석 추가
