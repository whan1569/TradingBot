📌 파일 구성도 (coin-trading-bot 프로젝트)

1️⃣ Root 디렉토리 구조
/coin-trading-bot
│
├── config/
│   ├── config.json              # 시스템 설정 파일
│   ├── strategy_config.json     # 전략 관련 설정
│   ├── api_keys.json            # API 키 파일 (Binance, LunarCrush 등)
│
├── data/
│   ├── raw/                     # 원시 데이터
│   ├── processed/               # 처리된 데이터 (심리 지표, 차트 분석)
│   ├── historical/              # 역사적 데이터
│
├── strategies/
│   ├── market_sentiment.py      # 시장 심리 분석
│   ├── chart_analysis.py        # 차트 분석 (이동평균선, RSI, 볼린저 밴드 등)
│   ├── signal_processing.py     # 롱/숏 신호 생성 로직
│   ├── trading_decision.py      # 최종 트레이딩 결정
│
├── models/
│   ├── sentiment_model.py       # 감성 분석 모델 (트위터, 뉴스)
│   ├── on_chain_model.py        # 온체인 데이터 분석 모델
│   ├── backtest_model.py        # 백테스트 및 최적화
│
├── backtest/
│   ├── backtest_engine.py       # 백테스트 실행 엔진
│   ├── test_results/            # 백테스트 결과 저장
│   ├── optimization.py          # 최적화 분석
│
├── system/
│   ├── auto_trader.py           # 자동 매매 시스템 본체
│   ├── notifier.py              # 알림 시스템 (거래 알림, 경고 등)
│
├── utils/
│   ├── config_loader.py         # 설정 파일 로드 함수 (config.json, strategy_config.json, api_keys.json)
│   ├── data_loader.py           # 데이터 로딩 함수
│   ├── api_connector.py         # API 연결 함수 (Binance, LunarCrush 등)
│   ├── logger.py                # 로깅 관련 함수
│   ├── helpers.py               # 기타 유틸리티 함수
│
├── dashboard/
│   ├── dashboard_main.py        # 대시보드 실행 파일 (Streamlit)
│
├── dashboard/components/
│   ├── trade_signal_flow.py     # 매매 신호 흐름 시각화
│   ├── chart_visualizer.py      # 기술적 지표 차트 (RSI, 이동평균선, 볼린저 밴드)
│   ├── sentiment_analysis.py    # 시장 심리 분석 차트 (공포 & 탐욕 지수, 소셜 데이터)
│   ├── portfolio_tracker.py     # 트레이딩 기록 및 수익률 변동 차트
│
├── dashboard/utils/
│   ├── data_fetcher.py          # 실시간 가격 데이터 API 가져오기
│   ├── update_manager.py        # 실시간 데이터 업데이트 핸들링
│
└── main.py                      # 시스템 실행 엔트리 포인트

---

2️⃣ 주요 디렉토리 및 파일 설명
✅ config/: API 키 및 전략 설정을 관리하는 디렉토리
✅ data/: 원시 및 처리된 데이터를 저장하는 디렉토리
✅ strategies/: 시장 분석 및 거래 전략 관련 모듈
  - market_sentiment.py: 시장 심리 분석 (공포 & 탐욕 지수, 롱/숏 비율, 소셜 데이터 분석)
  - chart_analysis.py: 차트 분석 (이동평균선, RSI, 볼린저 밴드 등)
  - signal_processing.py: 롱/숏 신호 판단
  - trading_decision.py: 최종 거래 결정
✅ models/: AI 및 데이터 분석 모델 저장
✅ backtest/: 백테스트 및 최적화 기능 구현
✅ system/: 자동 매매 및 알림 시스템
✅ utils/: API 연결, 데이터 로딩, 로깅 등의 유틸리티 함수 모음
✅ dashboard/: 트레이딩 대시보드 (Streamlit 기반)
✅ main.py: 시스템 실행 엔트리 포인트

---

3️⃣ 프로세스 흐름 (시각화 포함)
1) 시장 데이터 수집
✅ api_connector.py → 바이낸스 및 LunarCrush API에서 데이터 수집
✅ data_loader.py → 수집된 데이터 정리 및 저장

2) 시장 심리 분석
✅ market_sentiment.py → 공포 & 탐욕 지수, 롱/숏 비율, 소셜 미디어 분석

3) 차트 분석
✅ chart_analysis.py → 이동평균선, RSI, 볼린저 밴드 분석

4) 롱/숏 신호 판단
✅ signal_processing.py → 시장 심리와 차트 분석 통합 후 롱/숏 신호 생성

5) 최종 트레이딩 결정
✅ trading_decision.py → 신호 기반 최종 매매 판단

6) 💡 시각화 추가
✅ trade_signal_flow.py → strategies/ 내의 분석 과정 시각화 (어떤 신호로 롱/숏 결정?)
✅ chart_visualizer.py → RSI, 이동평균선, 볼린저 밴드 시각화
✅ sentiment_analysis.py → 시장 심리 데이터 그래프

7) 자동 매매 실행
✅ auto_trader.py → 트레이딩 자동 실행

8) 대시보드 연결
✅ main.py 실행 시 Streamlit 대시보드 자동 실행
→ 매매 신호 흐름 실시간 모니터링 가능

---

4️⃣ 추가 시각화 전략
✅ 1) 매매 신호 시각화 (trade_signal_flow.py)
- strategies/ 내부의 시장 심리 분석, 차트 분석, 신호 생성, 트레이딩 결정의 흐름을 실시간 시각화
- 각 전략이 어떤 데이터를 기반으로 롱/숏을 결정하는지 실시간으로 확인

✅ 2) 트레이딩 흐름 모니터링
- main.py 실행 시, 대시보드를 자동 실행하여 매매 신호 변화를 시각적으로 확인 가능

---

5️⃣ 결과 기대 효과
✅ 매매 신호가 실시간으로 어떻게 결정되는지 한눈에 파악 가능
✅ 전략이 정상적으로 작동하는지 트레이딩 로직 디버깅 가능
✅ 자동 매매 실행 시, 시각적으로 매매 흐름을 확인하며 판단 가능

---

6️⃣ 다음 작업
1️⃣ trade_signal_flow.py에서 롱/숏 신호의 변화를 실시간으로 시각화하는 코드 작성
2️⃣ main.py 실행 시 대시보드 자동 실행 추가
3️⃣ chart_visualizer.py 및 sentiment_analysis.py와 연결하여 신호 흐름을 분석
